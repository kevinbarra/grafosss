# Form implementation generated from reading ui file '.\interfaz.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6.QtWidgets import QApplication, QMessageBox, QInputDialog, QFileDialog
from PyQt6 import QtCore, QtGui, QtWidgets
from mplwidget import MplWidget
from tarea_grafis import Red

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.red = Red()
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1150, 691)
        MainWindow.setStyleSheet("230")
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setMinimumSize(QtCore.QSize(1150, 670))
        self.centralwidget.setStyleSheet("background-color: rgb(245, 245, 245);")
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.Body = QtWidgets.QFrame(parent=self.centralwidget)
        self.Body.setStyleSheet("")
        self.Body.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
        self.Body.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.Body.setObjectName("Body")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.Body)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.Container = QtWidgets.QFrame(parent=self.Body)
        self.Container.setStyleSheet("background-color: rgb(230, 230, 230);")
        self.Container.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
        self.Container.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.Container.setObjectName("Container")
        self.verticalLayout_18 = QtWidgets.QVBoxLayout(self.Container)
        self.verticalLayout_18.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_18.setSpacing(0)
        self.verticalLayout_18.setObjectName("verticalLayout_18")
        self.frame = QtWidgets.QFrame(parent=self.Container)
        self.frame.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.DefaultContextMenu)
        self.frame.setLineWidth(0)
        self.frame.setObjectName("frame")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setSpacing(0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.frame1 = QtWidgets.QFrame(parent=self.frame)
        self.frame1.setStyleSheet("background-color: rgb(230, 230, 230);")
        self.frame1.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
        self.frame1.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame1.setObjectName("frame1")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.frame1)
        self.horizontalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_6.setSpacing(0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.frame_4 = QtWidgets.QFrame(parent=self.frame1)
        self.frame_4.setMinimumSize(QtCore.QSize(0, 0))
        self.frame_4.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.frame_4.setStyleSheet("background-color: rgb(230, 230, 230);")
        self.frame_4.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_4.setObjectName("frame_4")
        self.gridLayout = QtWidgets.QGridLayout(self.frame_4)
        self.gridLayout.setContentsMargins(10, 10, 10, 10)
        self.gridLayout.setSpacing(10)
        self.gridLayout.setObjectName("gridLayout")
        self.verticalFrame = QtWidgets.QFrame(parent=self.frame_4)
        self.verticalFrame.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        self.verticalFrame.setObjectName("verticalFrame")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalFrame)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_22 = QtWidgets.QLabel(parent=self.verticalFrame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_22.sizePolicy().hasHeightForWidth())
        self.label_22.setSizePolicy(sizePolicy)
        self.label_22.setMinimumSize(QtCore.QSize(0, 30))
        font = QtGui.QFont()
        font.setPointSize(13)
        font.setBold(True)
        self.label_22.setFont(font)
        self.label_22.setStyleSheet("\n"
"            background-color: rgb(255, 255, 255);\n"
"            border: 1px solid rgb(200, 200, 200);\n"
"            color: rgb(0, 0, 0);\n"
"      ")
        self.label_22.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_22.setObjectName("label_22")
        self.verticalLayout_2.addWidget(self.label_22)
        self.widget = MplWidget(parent=self.verticalFrame)
        self.widget.setObjectName("widget")
        self.verticalLayout_2.addWidget(self.widget)
        self.gridLayout.addWidget(self.verticalFrame, 3, 0, 1, 1)
        self.label_2 = QtWidgets.QLabel(parent=self.frame_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setMinimumSize(QtCore.QSize(0, 20))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("\n"
"            background-color: rgb(255, 255, 255);\n"
"            border: 1px solid rgb(200, 200, 200);\n"
"            color: rgb(0, 0, 0);\n"
"")
        self.label_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 4, 0, 1, 1)
        self.horizontalLayout_6.addWidget(self.frame_4)
        self.frame_5 = QtWidgets.QFrame(parent=self.frame1)
        self.frame_5.setStyleSheet("background-color: rgb(230, 230, 230);")
        self.frame_5.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_5.setObjectName("frame_5")
        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.frame_5)
        self.verticalLayout_11.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_11.setSpacing(0)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.pushButton_8 = QtWidgets.QPushButton(parent=self.frame_5)
        self.pushButton_8.setStyleSheet("QPushButton {\n"
"            background-color: rgb(255, 255, 255);\n"
"            border: 1px solid rgb(200, 200, 200);\n"
"            color: rgb(0, 0, 0);\n"
"        }\n"
"        QPushButton:hover {\n"
"            border: 1px solid rgb(180, 180, 180);\n"
"        }")
        self.pushButton_8.setObjectName("pushButton_8")
        self.verticalLayout_11.addWidget(self.pushButton_8)
        self.pushButton_9 = QtWidgets.QPushButton(parent=self.frame_5)
        self.pushButton_9.setStyleSheet("QPushButton {\n"
"            background-color: rgb(255, 255, 255);\n"
"            border: 1px solid rgb(200, 200, 200);\n"
"            color: rgb(0, 0, 0);\n"
"        }\n"
"        QPushButton:hover {\n"
"            border: 1px solid rgb(180, 180, 180);\n"
"        }")
        self.pushButton_9.setObjectName("pushButton_9")
        self.verticalLayout_11.addWidget(self.pushButton_9)
        self.pushButton_7 = QtWidgets.QPushButton(parent=self.frame_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_7.sizePolicy().hasHeightForWidth())
        self.pushButton_7.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.pushButton_7.setFont(font)
        self.pushButton_7.setStyleSheet("QPushButton {\n"
"            background-color: rgb(255, 255, 255);\n"
"            border: 1px solid rgb(200, 200, 200);\n"
"            color: rgb(0, 0, 0);\n"
"        }\n"
"        QPushButton:hover {\n"
"            border: 1px solid rgb(180, 180, 180);\n"
"        }")
        self.pushButton_7.setObjectName("pushButton_7")
        self.verticalLayout_11.addWidget(self.pushButton_7)
        self.pushButton_4 = QtWidgets.QPushButton(parent=self.frame_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_4.sizePolicy().hasHeightForWidth())
        self.pushButton_4.setSizePolicy(sizePolicy)
        self.pushButton_4.setStyleSheet("QPushButton {\n"
"            background-color: rgb(255, 255, 255);\n"
"            border: 1px solid rgb(200, 200, 200);\n"
"            color: rgb(0, 0, 0);\n"
"        }\n"
"        QPushButton:hover {\n"
"            border: 1px solid rgb(180, 180, 180);\n"
"        }")
        self.pushButton_4.setObjectName("pushButton_4")
        self.verticalLayout_11.addWidget(self.pushButton_4)
        self.pushButton_6 = QtWidgets.QPushButton(parent=self.frame_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_6.sizePolicy().hasHeightForWidth())
        self.pushButton_6.setSizePolicy(sizePolicy)
        self.pushButton_6.setStyleSheet("QPushButton {\n"
"            background-color: rgb(255, 255, 255);\n"
"            border: 1px solid rgb(200, 200, 200);\n"
"            color: rgb(0, 0, 0);\n"
"        }\n"
"        QPushButton:hover {\n"
"            border: 1px solid rgb(180, 180, 180);\n"
"        }")
        self.pushButton_6.setObjectName("pushButton_6")
        self.verticalLayout_11.addWidget(self.pushButton_6)
        self.pushButton_5 = QtWidgets.QPushButton(parent=self.frame_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_5.sizePolicy().hasHeightForWidth())
        self.pushButton_5.setSizePolicy(sizePolicy)
        self.pushButton_5.setStyleSheet("QPushButton {\n"
"            background-color: rgb(255, 255, 255);\n"
"            border: 1px solid rgb(200, 200, 200);\n"
"            color: rgb(0, 0, 0);\n"
"        }\n"
"        QPushButton:hover {\n"
"            border: 1px solid rgb(180, 180, 180);\n"
"        }")
        self.pushButton_5.setObjectName("pushButton_5")
        self.verticalLayout_11.addWidget(self.pushButton_5)
        self.pushButton_2 = QtWidgets.QPushButton(parent=self.frame_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_2.sizePolicy().hasHeightForWidth())
        self.pushButton_2.setSizePolicy(sizePolicy)
        self.pushButton_2.setStyleSheet("QPushButton {\n"
"            background-color: rgb(255, 255, 255);\n"
"            border: 1px solid rgb(200, 200, 200);\n"
"            color: rgb(0, 0, 0);\n"
"        }\n"
"        QPushButton:hover {\n"
"            border: 1px solid rgb(180, 180, 180);\n"
"        }")
        self.pushButton_2.setObjectName("pushButton_2")
        self.verticalLayout_11.addWidget(self.pushButton_2)
        self.pushButton_3 = QtWidgets.QPushButton(parent=self.frame_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_3.sizePolicy().hasHeightForWidth())
        self.pushButton_3.setSizePolicy(sizePolicy)
        self.pushButton_3.setStyleSheet("QPushButton {\n"
"            background-color: rgb(255, 255, 255);\n"
"            border: 1px solid rgb(200, 200, 200);\n"
"            color: rgb(0, 0, 0);\n"
"        }\n"
"        QPushButton:hover {\n"
"            border: 1px solid rgb(180, 180, 180);\n"
"        }")
        self.pushButton_3.setObjectName("pushButton_3")
        self.verticalLayout_11.addWidget(self.pushButton_3)
        self.tableWidget = QtWidgets.QTableWidget(parent=self.frame_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tableWidget.sizePolicy().hasHeightForWidth())
        self.tableWidget.setSizePolicy(sizePolicy)
        self.tableWidget.setStyleSheet("color: rgb(0, 0, 0);")
        self.tableWidget.setAlternatingRowColors(True)
        self.tableWidget.setRowCount(0)
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setObjectName("tableWidget")
        self.verticalLayout_11.addWidget(self.tableWidget)
        self.horizontalLayout_6.addWidget(self.frame_5)
        self.verticalLayout_6.addWidget(self.frame1)
        self.verticalLayout_18.addWidget(self.frame)
        self.horizontalLayout.addWidget(self.Container)
        self.verticalLayout.addWidget(self.Body)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_22.setText(_translate("MainWindow", "Grafo"))
        self.label_2.setText(_translate("MainWindow", "X: Y:"))
        self.pushButton_8.setText(_translate("MainWindow", "Cargar"))
        self.pushButton_9.setText(_translate("MainWindow", "Guardar"))
        self.pushButton_4.setText(_translate("MainWindow", "Agregar Nodo"))
        self.pushButton_7.setText(_translate("MainWindow", "Dibujar"))
        self.pushButton_6.setText(_translate("MainWindow", "DJK"))
        self.pushButton_5.setText(_translate("MainWindow", "BFS"))
        self.pushButton_2.setText(_translate("MainWindow", "DFS"))
        self.pushButton_3.setText(_translate("MainWindow", "Vaciar"))

        self.pushButton_4.clicked.connect(self.anadir_vertice)
        self.pushButton_2.clicked.connect(self.iniciar_bfs)
        self.pushButton_3.clicked.connect(self.reiniciar_red)
        self.pushButton_5.clicked.connect(self.iniciar_dfs)
        self.pushButton_6.clicked.connect(self.iniciar_dijkstra)
        self.pushButton_7.clicked.connect(self.dibujar_red)
        self.pushButton_8.clicked.connect(self.importar_red)
        self.pushButton_9.clicked.connect(self.guardar)
        self.tableWidget.itemChanged.connect(self.actualizar_red_desde_interfaz)

        # Manejo de Grafo

    def anadir_vertice(self):
        if len(self.red.vertices) < 26:  # No exceder 26 vértices
            nuevo_vertice = chr(65 + len(self.red.vertices))
            self.red.agregar_vertice(nuevo_vertice)
            self.configurar_interfaz()
            self.refrescar_matriz()
            self.refrescar_visualizacion()
        else:
            QtWidgets.QMessageBox.warning(None, "Capacidad Máxima", "No es posible agregar más vértices.")


    def mostrar_ruta(self, secuencia, metodo):
        ax = self.widget.canvas.figure.add_subplot(111)
        ax.clear()
        for vertice in secuencia:
            self.red.dibujar(ax, vertice_resaltado=vertice)
            QApplication.processEvents()  # Actualiza visualmente cada paso
        self.presentar_resultado(metodo, secuencia)

    def iniciar_dfs(self):
        self.widget.canvas.figure.clear()

        inicio = self.seleccionar_inicio()
        if inicio:
            secuencia = self.red.dfs(inicio)
            self.mostrar_ruta(secuencia, "DFS")

    def iniciar_bfs(self):
        self.widget.canvas.figure.clear()

        inicio = self.seleccionar_inicio()
        if inicio:
            secuencia = self.red.bfs(inicio)
            self.mostrar_ruta(secuencia, "BFS")

    def guardar(self):
        self.grafo.guardar_grafo_en_json('red.json')
    def iniciar_dijkstra(self):
        self.widget.canvas.figure.clear()

        inicio = self.seleccionar_inicio()
        if inicio:
            destino, ok = QInputDialog.getText(None, "Destino", "Especifique el vértice destino:")
            if ok and destino:
                destino = destino.upper()
                if destino in self.red.vertices:
                    costo, ruta = self.red.dijkstra(inicio, destino)
                    if costo < float('inf'):
                        self.mostrar_ruta(ruta, "Dijkstra")
                    else:
                        QMessageBox.warning(None, "Destino Inalcanzable",
                                            f"No se puede llegar al vértice '{destino}' desde '{inicio}'.")
                else:
                    QMessageBox.warning(None, "Vértice No Encontrado")
            else:
                QMessageBox.warning(None, "Operación Interrumpida", "No se especificó un vértice destino.")

    def seleccionar_inicio(self):
        return "A"  # Podría modificarse para seleccionar dinámicamente

    def importar_red(self):
        # Abre un diálogo para seleccionar un archivo JSON
        nombre_archivo, _ = QFileDialog.getOpenFileName(
            None,
            "Seleccionar Archivo de Red",
            "",  # Directorio inicial, puedes especificar uno
            "JSON Files (*.json)"  # Solo muestra archivos .json
        )

        if nombre_archivo:
            try:
                self.red.cargar_Red_desde_json(nombre_archivo)
                self.refrescar_visualizacion()
                self.refrescar_matriz()
            except Exception as e:
                QMessageBox.warning(None, "Error al Cargar", f"No se pudo cargar el archivo: {e}")
    def presentar_resultado(self, metodo, secuencia):
        if isinstance(secuencia, tuple):  # Cuando es resultado de Dijkstra
            costo, ruta = secuencia
            if costo < float('inf'):
                ruta_str = " -> ".join(ruta)
                mensaje = f"{metodo}: Costo mínimo es {costo}.\nRuta: {ruta_str}"
            else:
                mensaje = f"{metodo}: Ruta no disponible."
        else:  # Resultado de BFS o DFS
            if secuencia:
                ruta_str = " -> ".join(secuencia)
                mensaje = f"{metodo}: {ruta_str}"
            else:
                mensaje = f"{metodo}: Sin vértices o rutas disponibles."

        QtWidgets.QMessageBox.information(None, f"Resultado de {metodo}", mensaje)

    def refrescar_visualizacion(self):
        self.widget.canvas.figure.clear()
        ax = self.widget.canvas.figure.subplots()
        self.red.dibujar(ax)
        self.widget.canvas.draw()

    def dibujar_red(self):
        self.widget.canvas.figure.clear()
        ax = self.widget.canvas.figure.add_subplot(111)
        self.red.dibujar(ax)
        self.widget.canvas.draw()
        self.refrescar_matriz()

    def configurar_interfaz(self):
        vertices = self.red.vertices
        self.tableWidget.setRowCount(len(vertices))
        self.tableWidget.setColumnCount(len(vertices))
        self.tableWidget.setHorizontalHeaderLabels(vertices)
        self.tableWidget.setVerticalHeaderLabels(vertices)

    def refrescar_matriz(self):
        self.tableWidget.clear()
        vertices = sorted(self.red.vertices)
        self.tableWidget.setRowCount(len(vertices))
        self.tableWidget.setColumnCount(len(vertices))
        self.tableWidget.setHorizontalHeaderLabels(vertices)
        self.tableWidget.setVerticalHeaderLabels(vertices)

        for i, origen in enumerate(vertices):
            for j, destino in enumerate(vertices):
                peso = self.red.red.get(origen, {}).get(destino, 0)
                item = QtWidgets.QTableWidgetItem(str(peso))
                item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
                self.tableWidget.setItem(i, j, item)

    def actualizar_red_desde_interfaz(self, item):
        try:
            peso = int(item.text())
            origen = self.tableWidget.horizontalHeaderItem(item.column()).text()
            destino = self.tableWidget.verticalHeaderItem(item.row()).text()
            if peso == 0:
                self.red.eliminar_arista(origen, destino)
            else:
                self.red.agregar_arista(origen, destino, peso)
        except ValueError:
            QMessageBox.warning(self.tableWidget, "Error de Entrada", "Introduzca un número válido.")
            self.refrescar_matriz()  # Restablece el valor anterior en caso de error

    def ajustar_tipo_red(self):
        self.es_dirigida = self.checkbox_dirigido.isChecked()

    def reiniciar_red(self):
        self.red = Red(dirigida=self.red.dirigida)
        self.refrescar_visualizacion()
        self.configurar_interfaz()
        QMessageBox.information(None, "Red Reiniciada", "La red ha sido reiniciada correctamente.")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
